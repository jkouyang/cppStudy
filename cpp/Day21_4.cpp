/*普通函数与函数模板的调用规则
	1.如果函数模板和普通函数都可以实现，优先调用普通函数
	2.可以通过空模板参数列表来强制调用函数模板
	3.函数模板也可以发生重载
	4.如果函数模板可以产生更好的匹配,优先调用函数模板

注意：总结--既然提供了函数模板，最好就不要提供普通函数，否则容易出现二义性
*/

#include<iostream>
using namespace std;

//普通函数
void print_21_4(int a,int b) {
	cout << "普通函数的调用" << endl;
}

//函数模板
template<typename T>
void print_21_4(T a, T b) {
	cout << "函数模板的调用" << endl;
}

template<typename T>
void print_21_4(T a, T b,T c) {//3.函数模板也可以发生重载
	cout << "函数模板的调用" << endl;
}


void test_21_4() {
	print_21_4(10, 10);//1.如果函数模板和普通函数都可以实现，优先调用普通函数
						//如果普通函数只有声明没有定义也会调用普通函数，并且在执行时会报错(普通函数没有定义，无法执行)

	print_21_4<>(10, 10);//2.可以通过空模板参数列表来强制调用函数模板

	print_21_4(10, 10, 10);//3.函数模板也可以发生重载

	print_21_4('a', 'b');//4.如果函数模板可以产生更好的匹配,优先调用函数模板
						 //两个函数都可调用，但调用函数模板不用进行隐式转换，因此优先调用函数模板
}

//void main() {
//	test_21_4(); 
//}

